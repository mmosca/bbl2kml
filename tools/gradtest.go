package main

import (
	"image/color"
	"fmt"
	"os"
	kml "github.com/twpayne/go-kml"
	"github.com/twpayne/go-kml/icon"
)

type GradSet struct  {
  R uint8
  G uint8
  B uint8
  A uint8
}

const (
	NUM_GRAD = 20
	GRAD_RED = 0
	GRAD_RGN = 1
	GRAD_YOR = 2
)

var red_grad []GradSet = []GradSet{
  { R: 0x67, G: 0x00, B: 0x0d, A: 0xff },
  { R: 0x80, G: 0x06, B: 0x10, A: 0xff },
  { R: 0x99, G: 0x0c, B: 0x13, A: 0xff },
  { R: 0xad, G: 0x10, B: 0x16, A: 0xff },
  { R: 0xbc, G: 0x14, B: 0x19, A: 0xff },
  { R: 0xcb, G: 0x18, B: 0x1d, A: 0xff },
  { R: 0xda, G: 0x26, B: 0x23, A: 0xff },
  { R: 0xe8, G: 0x34, B: 0x29, A: 0xff },
  { R: 0xf2, G: 0x44, B: 0x32, A: 0xff },
  { R: 0xf7, G: 0x57, B: 0x3e, A: 0xff },
  { R: 0xfb, G: 0x6a, B: 0x4a, A: 0xff },
  { R: 0xfc, G: 0x7a, B: 0x5a, A: 0xff },
  { R: 0xfc, G: 0x8a, B: 0x6a, A: 0xff },
  { R: 0xfc, G: 0x9a, B: 0x7b, A: 0xff },
  { R: 0xfc, G: 0xab, B: 0x8e, A: 0xff },
  { R: 0xfc, G: 0xbb, B: 0xa1, A: 0xff },
  { R: 0xfd, G: 0xca, B: 0xb5, A: 0xff },
  { R: 0xfe, G: 0xd9, B: 0xc8, A: 0xff },
  { R: 0xff, G: 0xe5, B: 0xd8, A: 0xff },
  { R: 0xff, G: 0xed, B: 0xe4, A: 0xff },
  { R: 0xff, G: 0xf5, B: 0xf0, A: 0xff },
}


var rdylgn_grad []GradSet = []GradSet{
  { R: 0xa5, G: 0x00, B: 0x26, A: 0xff },
  { R: 0xbe, G: 0x18, B: 0x26, A: 0xff },
  { R: 0xd7, G: 0x30, B: 0x27, A: 0xff },
  { R: 0xe6, G: 0x4e, B: 0x35, A: 0xff },
  { R: 0xf4, G: 0x6d, B: 0x43, A: 0xff },
  { R: 0xf9, G: 0x8e, B: 0x52, A: 0xff },
  { R: 0xfd, G: 0xae, B: 0x61, A: 0xff },
  { R: 0xfe, G: 0xc7, B: 0x76, A: 0xff },
  { R: 0xfe, G: 0xe0, B: 0x8b, A: 0xff },
  { R: 0xff, G: 0xf0, B: 0xa5, A: 0xff },
  { R: 0xff, G: 0xff, B: 0xbf, A: 0xff },
  { R: 0xec, G: 0xf7, B: 0xa5, A: 0xff },
  { R: 0xd9, G: 0xef, B: 0x8b, A: 0xff },
  { R: 0xc0, G: 0xe4, B: 0x7a, A: 0xff },
  { R: 0xa6, G: 0xd9, B: 0x6a, A: 0xff },
  { R: 0x86, G: 0xcb, B: 0x66, A: 0xff },
  { R: 0x66, G: 0xbd, B: 0x63, A: 0xff },
  { R: 0x40, G: 0xab, B: 0x59, A: 0xff },
  { R: 0x1a, G: 0x98, B: 0x50, A: 0xff },
  { R: 0x0d, G: 0x80, B: 0x43, A: 0xff },
  { R: 0x00, G: 0x68, B: 0x37, A: 0xff },
}


var ylorrd_grad []GradSet = []GradSet{
  { R: 0x80, G: 0x00, B: 0x26, A: 0xff },
  { R: 0x98, G: 0x00, B: 0x26, A: 0xff },
  { R: 0xb1, G: 0x00, B: 0x26, A: 0xff },
  { R: 0xc5, G: 0x05, B: 0x24, A: 0xff },
  { R: 0xd4, G: 0x0f, B: 0x20, A: 0xff },
  { R: 0xe3, G: 0x1a, B: 0x1c, A: 0xff },
  { R: 0xed, G: 0x2e, B: 0x21, A: 0xff },
  { R: 0xf7, G: 0x43, B: 0x27, A: 0xff },
  { R: 0xfd, G: 0x5a, B: 0x2d, A: 0xff },
  { R: 0xfd, G: 0x74, B: 0x35, A: 0xff },
  { R: 0xfd, G: 0x8d, B: 0x3c, A: 0xff },
  { R: 0xfe, G: 0x9c, B: 0x42, A: 0xff },
  { R: 0xfe, G: 0xab, B: 0x49, A: 0xff },
  { R: 0xfe, G: 0xba, B: 0x54, A: 0xff },
  { R: 0xfe, G: 0xca, B: 0x65, A: 0xff },
  { R: 0xfe, G: 0xd9, B: 0x76, A: 0xff },
  { R: 0xff, G: 0xe1, B: 0x87, A: 0xff },
  { R: 0xff, G: 0xe9, B: 0x98, A: 0xff },
  { R: 0xff, G: 0xf1, B: 0xa9, A: 0xff },
  { R: 0xff, G: 0xf8, B: 0xbb, A: 0xff },
  { R: 0xff, G: 0xff, B: 0xcc, A: 0xff },
}

func Get_gradset(idx int) ([]GradSet) {
	switch idx {
	case 		GRAD_YOR:
		return ylorrd_grad
	case GRAD_RGN:
		return rdylgn_grad
	default:
		return red_grad
	}
}

func genicons (gidx int) ([]kml.Element) {
	gcols := Get_gradset(gidx)
	icons := []kml.Element{}
	for j,c := range gcols {
		sname := fmt.Sprintf("styleGrad%03d", j*5)
		el := kml.SharedStyle(
			sname,
			kml.IconStyle(
				kml.Scale(0.5),
				kml.Color(color.RGBA{R: c.R, G: c.G, B: c.B, A: c.A}),
				kml.Icon(
					kml.Href(icon.PaletteHref(2, 18)),
				),
			),
		)
		icons = append(icons, el)
	}
	return icons
}

func main() {

	lat := 50.9
	for i:= 0 ; i < 3; i++ {
		d := kml.Folder(kml.Name(fmt.Sprintf("ColTest_%d", i)))
		ik := genicons(i)
		d.Add(ik...)
		lon := -1.6
		lat -= 0.01
		for j := 0; j < 21; j++ {
			lon += 0.01
			sn := fmt.Sprintf("styleGrad%03d", j*5)
			p := kml.Placemark(
				kml.Name(sn),
				kml.Point(
					kml.Coordinates(kml.Coordinate{Lon: lon, Lat: lat}),
				),
				kml.StyleURL("#"+sn),
			)
			d.Add(p)
		}
		k := kml.KML(d)
		f,_ := os.Create(fmt.Sprintf("coltest_%d.kml", i))
		defer f.Close()
		k.WriteIndent(f, "", "  ")
	}
}
